package new21Game837;

/**
 * 思路：DP
 *
 * 执行用时 :4 ms, 在所有 Java 提交中击败了96.23%的用户
 * 内存消耗 :38.6 MB, 在所有 Java 提交中击败了100.00%的用户
 */
class Solution {
    /**
     * 爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：
     *
     * 爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。
     * 每次抽取都是独立的，其结果具有相同的概率。
     *
     * 当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？
     *
     * 示例 1：
     * 输入：N = 10, K = 1, W = 10
     * 输出：1.00000
     * 说明：爱丽丝得到一张卡，然后停止。
     *
     * 示例 2：
     * 输入：N = 6, K = 1, W = 10
     * 输出：0.60000
     * 说明：爱丽丝得到一张卡，然后停止。
     * 在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
     *
     * 示例 3：
     * 输入：N = 21, K = 17, W = 10
     * 输出：0.73278
     *
     * 提示：
     * 0 <= K <= N <= 10000
     * 1 <= W <= 10000
     * 如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
     * 此问题的判断限制时间已经减少。
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/new-21-game
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param N 不能超过的数字
     * @param K 还能继续抽牌的数字
     * @param W 牌的最大值
     * @return 没有超过的概率
     */
    public double new21Game(int N, int K, int W) {
        if (K == 0) return 1.0;

        // 当 N=21 K=17 W=10 时，
        // K=17....N=21....K+W-1=26
        // dp[17]=dp[18]=..=dp[21]=1; dp[22]=dp[23]=..=dp[26]=0
        // dp[i]=(dp[i+1]+dp[i+2]+..+dp[i+10])/10 (i=0,1,2,..,16)
        //
        // 当 N=21 K=17 W=2 时，
        // K=17....K+W-1=18....N=21
        // dp[17]=dp[18]=1
        // dp[i]=(dp[i+1]+dp[i+2])/2 (i=0,1,2,..,16)
        double[] dp = new double[K+W];

        int maxEffect = Math.max(K+W-1, N);
        for (int i = K; i <= maxEffect; i++) {
            dp[i] = 1.0;
        }

        // dp[K]+dp[K+1]+dp[K+2]+...+dp[K+W-1]
        double sum = Math.min(N-K+1, W);
        dp[K-1] = sum / W;
        for (int i = K-2; i >= 0; i--) {
            dp[i] = (sum + (dp[i+1]-dp[i+W+1])) / W;
        }
        return dp[0];

    }
}
