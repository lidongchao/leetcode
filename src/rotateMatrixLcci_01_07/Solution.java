package rotateMatrixLcci_01_07;

/**
 * 思路：找规律
 *
 * 4*4 的矩阵，每个点需要移动到下一个点的规律是 (x,y) -> (y,3-x) 或 (3-y,x) ->(x,y)
 * (0,0) -> (0,3)
 * (0,1) -> (1,3)
 * (0,2) -> (2,3)
 * (0,3) -> (3,3)
 * ----
 * (1,0) -> (0,2)
 * (1,1) -> (1,2)
 * (1,2) -> (2,2)
 * (1,3) -> (3,2)
 * ---
 * (2,0) -> (0,1)
 * (2,1) -> (1,1)
 * (2,2) -> (2,1)
 * (2,3) -> (3,1)
 * ---
 * (3,0) -> (0,0)
 * (3,1) -> (1,0)
 * (3,2) -> (2,0)
 * (3,3) -> (3,0)
 *
 * 有 4 组数据可以形成一个闭环，又可以分为两部分，第一部分从 (0,0) 开始，直到 (0,3) (不含) 为止，第二部分从 (1,1) 开始，
 * 直到 (1,2) (不含) 为止。
 * (0,0) -> (0,3) -> (3,3) -> (3,0) -> (0,0)
 * (0,1) -> (1,3) -> (3,2) -> (2,0) -> (0,1)
 * (0,2) -> (2,3) -> (3,1) -> (1,0) -> (0,2)
 *
 * (1,1) -> (1,2) -> (2,2) -> (2,1) -> (1,1)
 *
 * 所以两层 for 循环，外层循环是 (0,0) (1,1)，内层循环是 (0,0) (0,1) (0,2)。
 *
 * 执行用时 :0 ms, 在所有 Java 提交中击败了100.00%的用户
 * 内存消耗 :39.7 MB, 在所有 Java 提交中击败了100.00%的用户
 */
class Solution {
    /**
     * 给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。
     * 不占用额外内存空间能否做到？
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/rotate-matrix-lcci
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param matrix 矩阵
     */
    public void rotate(int[][] matrix) {
        int N_1 = matrix.length - 1;

        // 外层循环，从 (0,0) 开始直到 ((N_1)/2,(N_1)/2) (含)
        for (int i = 0; i <= N_1 / 2; i++) {
            // 内层循环，(i,i) 的 x 轴对称点是 (i,N_1-i)，所以从 (i,i) 开始直到 (i,N_1-i) (不含)
            for (int j = i; j < N_1 - i; j++) {
                // 闭环，四个点交换位置 (N_1-j,i) ->(i,j)
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[N_1-j][i];
                matrix[N_1-j][i] = matrix[N_1-i][N_1-j];
                matrix[N_1-i][N_1-j] = matrix[j][N_1-i];
                matrix[j][N_1-i] = tmp;
            }
        }
    }
}
