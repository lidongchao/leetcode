package nthDigit400;

/**
 * 思路 1：分步寻找
 *
 * 第一步：寻找字符所属数字有多少位
 * 1 位 1~9 共有 9 个字符
 * 2 位 10~99 90*2 个字符
 * 3 位 100~999 900*3 个字符
 * 4 位 1000~9999 9000*4 个字符
 * k 位 9*10^(k-1)*k 个字符
 *
 * 先判断 n - 9，如果大于 0 则不止 1 位，否则有 1 位。
 * 再判断 n - 9 - 90 * 2，如果大于 0 则不止 2 位，否则有 2 位。
 * 保存最后一次 num = n - 9 * 1 - 90 * 2 - 900 * 3 - ... (9 * 10 ^ (k - 2)) * (k - 1)，其中 k 为字符所属数字的位数。
 *
 *
 * 第二步：寻找字符所属数字
 * 根据 num 和 k，能够确定字符所属数字。
 * 例如 k = 4 & num in [1,2,3,4]，则数字为 1000；k = 4 & num in [5,6,7,8]，数字也为 1001。
 * 得出规律为 digit = (num - 1) / k + 10 ^ (k - 1);
 *
 * 第三步：确定所属数字的哪一个具体字符
 * 再根据 num % k 和 digit，能够确定具体的字符。
 * 例如 k = 4 & num in [1,2,3,4]，num % k in [1,2,3,0]，则字符分别为数字 1000 中的 '1' '0' '0' '0'；
 * k = 4 & num in [5,6,7,8]，num % k in [1,2,3,0]，则字符分别为数字 1001 中的 '1' '0' '0' '1'。
 * 能够看出 num % k 指出了 digit 从左向右的第几个字符，注意 0 代表最右边的字符，
 * 得出规律为：
 *     char = digit % 10                            (if num % k == 0);
 *     char = digit / 10^(k - (num % k)) % 10       (if num % k > 0).
 *
 * 执行用时 :0 ms, 在所有 Java 提交中击败了100.00%的用户
 * 内存消耗 :36.6 MB, 在所有 Java 提交中击败了6.67%的用户
 */
class Solution1 {
    /**
     * 说明 1：
     * 在无限的整数序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...中找到第 n 个数字。
     *
     * 注意:
     * n 是正数且在 32 位整形范围内 ( n < 2^31)。
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/nth-digit
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * 说明 2：
     * 数字以0123456789101112131415…的格式序列化到一个字符序列中。
     * 在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。
     *
     * 请写一个函数，求任意第n位对应的数字。
     *  
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param n 索引
     * @return 第 n 个数
     */
    public int findNthDigit(int n) {
        int num = n;
        int k = 1;
        double numOfK;
        // 寻找字符所属数字有多少位
        while (num > (numOfK = 9 * Math.pow(10, k - 1) * k)) {
            k++;
            num -= numOfK;
        }
        // 寻找字符所属数字
        int digit = (int)((num - 1) / k + Math.pow(10, k - 1));
        // 确定所属数字的哪一个具体字符
        if (num % k == 0) return digit % 10;
        return (int) (digit / Math.pow(10, k - (num % k)) % 10);
    }
}
