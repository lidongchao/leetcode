package lastRemainingNumOfCircle_62;

/**
 * 思路 2：约瑟夫环
 *
 * 0 1 2 3
 * [2] 3 0 1
 * [1] 3 0
 * [3] 0
 *
 * 0 1 2 3 4
 * [2] 3 4 0 1
 * [0] 1 3 4
 * [4] 1 3
 * [1] 3
 *
 * n = 6, m = 3
 * 0                           <-- 0
 * 4 0:[4] 0                   <-- (0 + m) % 2 = 3 % 2 = 1 % 2 = 1
 * 4 0 [1]:4 0 1               <-- (1 + m) % 3 = 4 % 3 = 1 % 3 = 1
 * 0 1 [3] 4:0 1 3 4           <-- (1 + m) % 4 = 4 % 4 = 0 % 4 = 0
 * 3 4 [5] 0 1:3 4 5 0 1       <-- (0 + m) % 5         = 3 % 5 = 3
 * 0 1 [2] 3 4 5:0 1 2 3 4 5   <-- (3 + m) % 6 = 6 % 6 = 0 % 6 = 0
 *
 * 执行用时 :7 ms, 在所有 Java 提交中击败了99.88%的用户
 * 内存消耗 :36.5 MB, 在所有 Java 提交中击败了100.00%的用户
 */
class Solution2 {
    /**
     * 0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。
     * 求出这个圆圈里剩下的最后一个数字。
     *
     * 例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，
     * 则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。
     *
     * 限制：
     * 1 <= n <= 10^5
     * 1 <= m <= 10^6
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param n 数字的个数
     * @param m 每次删除第几个数字
     * @return 最后剩下的数字
     */
    public int lastRemaining(int n, int m) {
        int idx = 0;
        for (int i = 2; i <= n; i++) {
            idx = (idx + m) % i;
        }
        return idx;
    }
}
